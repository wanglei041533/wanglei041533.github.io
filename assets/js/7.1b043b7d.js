(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{206:function(t,v,_){"use strict";_.r(v);var a=_(0),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),_("h3",{attrs:{id:"http请求模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http请求模型"}},[t._v("#")]),t._v(" http请求模型")]),t._v(" "),_("p",[t._v("两端（client，sever），两动作（请求，响应），无状态")]),t._v(" "),_("h3",{attrs:{id:"浏览器行为与http协议处理流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器行为与http协议处理流程"}},[t._v("#")]),t._v(" 浏览器行为与HTTP协议处理流程")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("输入网址并回车")])]),t._v(" "),_("li",[_("p",[t._v("解析域名")])]),t._v(" "),_("li",[_("p",[t._v("浏览器发送http请求")])]),t._v(" "),_("li",[_("p",[t._v("服务器处理请求")])]),t._v(" "),_("li",[_("p",[t._v("服务器返回HTML响应")])]),t._v(" "),_("li",[_("p",[t._v("浏览器处理HTML页面")])]),t._v(" "),_("li",[_("p",[t._v("继续请求其他资源")])])]),t._v(" "),_("p",[t._v("DNS相当于一个数据库，其中有两列，一列是域名，一列是ip。")]),t._v(" "),_("p",[t._v("路由器：转发数据包。 traceroute www.baidu.com")]),t._v(" "),_("h3",{attrs:{id:"什么是http协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是http协议"}},[t._v("#")]),t._v(" 什么是HTTP协议")]),t._v(" "),_("ul",[_("li",[t._v("HTTP是超文本传输协议，从www浏览器传输到本地浏览器的一种传输协议，网站是基于HTTP协议的，例如网站的图片、css、js等都是基于HTTP协议进行传输的。")]),t._v(" "),_("li",[t._v("HTTP协议是由从客户机到服务器的请求（Request）和从服务器到客户机的响应（Response）进行约束和规范。")])]),t._v(" "),_("h3",{attrs:{id:"了解tpcp-ip协议栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#了解tpcp-ip协议栈"}},[t._v("#")]),t._v(" 了解TPCP/IP协议栈")]),t._v(" "),_("ul",[_("li",[t._v("应用层\n"),_("ul",[_("li",[t._v("为用户提供所需要的各种服务，例如：HTTP、FTP、DNS、SMTP等。")])])]),t._v(" "),_("li",[t._v("传输层\n"),_("ul",[_("li",[t._v("为应用层实体提供端到端的通信功能，保证数据包的顺序传送及数据的完整性。")]),t._v(" "),_("li",[t._v("该层定义了两个主要的协议：传输控制协议（TCP）和用户数据包协议（UDP）。")])])]),t._v(" "),_("li",[t._v("网络层\n"),_("ul",[_("li",[t._v("主要解决主机到主机的通信功能。IP协议是网际互联层最重要的协议。")])])]),t._v(" "),_("li",[t._v("网络接口层\n"),_("ul",[_("li",[t._v("负责监视数据在知己和网络之间的交换。")])])])]),t._v(" "),_("p",[_("strong",[t._v("HTTP默认端口80，HTTPS默认端口443")])]),t._v(" "),_("h3",{attrs:{id:"http的工作过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http的工作过程"}},[t._v("#")]),t._v(" HTTP的工作过程")]),t._v(" "),_("h4",{attrs:{id:"一次http操作称为一个事务，其工作过程可分为四步："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一次http操作称为一个事务，其工作过程可分为四步："}},[t._v("#")]),t._v(" 一次HTTP操作称为一个事务，其工作过程可分为四步：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("首先客户机与服务器需要建立连接，只要单击某个超级链接，HTTP工作开始。")])]),t._v(" "),_("li",[_("p",[t._v("建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。")])]),t._v(" "),_("li",[_("p",[t._v("服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码、后边是MIME信息包括服务器信息、实体信息和可能的内容。")])]),t._v(" "),_("li",[_("p",[t._v("客户端接受服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开链接。")]),t._v(" "),_("p",[t._v("如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端，由显示屏输出。对于用户来说，这些过程是由HTTP自己完成的，用户只要用鼠标点击，等待信息显示就可以了。")])])]),t._v(" "),_("h3",{attrs:{id:"请求与响应"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求与响应"}},[t._v("#")]),t._v(" 请求与响应")]),t._v(" "),_("h4",{attrs:{id:"http请求组成：请求行、消息报头、请求正文。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http请求组成：请求行、消息报头、请求正文。"}},[t._v("#")]),t._v(" HTTP请求组成：请求行、消息报头、请求正文。")]),t._v(" "),_("h4",{attrs:{id:"http响应组成：状态行、消息报头、响应正文。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http响应组成：状态行、消息报头、响应正文。"}},[t._v("#")]),t._v(" HTTP响应组成：状态行、消息报头、响应正文。")]),t._v(" "),_("h3",{attrs:{id:"http状态吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http状态吗"}},[t._v("#")]),t._v(" HTTP状态吗")]),t._v(" "),_("h4",{attrs:{id:"状态代码有三位数字组成，第一个数字定义了响应类别，且有五种"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#状态代码有三位数字组成，第一个数字定义了响应类别，且有五种"}},[t._v("#")]),t._v(" 状态代码有三位数字组成，第一个数字定义了响应类别，且有五种")]),t._v(" "),_("ul",[_("li",[t._v("1XX 指示信息—表示请求已经接受，继续处理")]),t._v(" "),_("li",[t._v("2XX 成功—表示请求已被成功接受，理解，接受")]),t._v(" "),_("li",[t._v("3XX 重定向—要完成请求必须进行更近一步操作")]),t._v(" "),_("li",[t._v("4XX 客户端错误—请求语法错误或请求无法实现")]),t._v(" "),_("li",[t._v("5XX 服务端错误—服务器未能实现合法的请求")])]),t._v(" "),_("h3",{attrs:{id:"cookies和session"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookies和session"}},[t._v("#")]),t._v(" cookies和session")]),t._v(" "),_("ul",[_("li",[t._v("cookies是保存在客户端的小段文本，随客户端点每一个请求发送该url下的所有cookies到服务器端。")]),t._v(" "),_("li",[t._v("session保存在服务器端，通过唯一的sessionID来区别每一个用户。sessionID随每个连接请求发送到服务器端，服务器根据sessionID来识别客户端，在通过session的key获取session值。")])]),t._v(" "),_("h4",{attrs:{id:"cookie使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie使用"}},[t._v("#")]),t._v(" cookie使用")]),t._v(" "),_("ul",[_("li",[t._v("与cookie相关的http扩展头")]),t._v(" "),_("li",[t._v("cookie：客户端将服务器设置的cookie返回到服务器")]),t._v(" "),_("li",[t._v("set-cookie：服务器向客户端设置cookie")]),t._v(" "),_("li",[t._v("服务器在响应消息中用set-cookie头将cookie的内容送给客户端，客户端在新的请求中将相同的内容携带在cookie头重发送给服务器，从而实现会话的保持。")])]),t._v(" "),_("h4",{attrs:{id:"session的使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#session的使用"}},[t._v("#")]),t._v(" session的使用")]),t._v(" "),_("ul",[_("li",[t._v("使用cookie来实现")]),t._v(" "),_("li",[t._v("使用url回显来实现")])]),t._v(" "),_("h3",{attrs:{id:"http缓存机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http缓存机制"}},[t._v("#")]),t._v(" HTTP缓存机制")]),t._v(" "),_("ul",[_("li",[t._v("缓存会根据请求保存输出内容的副本，例如html页面，图片，下一个请求来到的时候：如果是相同的url，缓存直接使用副本响应访问请求，而不是向源服务器再次发送请求。")]),t._v(" "),_("li",[t._v("缓存的优点\n"),_("ul",[_("li",[t._v("减少响应延迟")]),t._v(" "),_("li",[t._v("减少网络带宽消耗")])])])]),t._v(" "),_("h3",{attrs:{id:"协商缓存—命中状态码是304"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存—命中状态码是304"}},[t._v("#")]),t._v(" 协商缓存—命中状态码是304")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Etag策略（优先）")]),t._v(" "),_("p",[t._v("资源要有唯一标示，资源变了，Etag也变，如果有这个策略，请求时携带if-None-Match，和服务器的做对比，一样的话直接返回304，不一样重推200")])]),t._v(" "),_("li",[_("p",[t._v("Last-Modified策略")]),t._v(" "),_("p",[t._v("资源生成时间，原理同Etag。如果没有Etag策略，检查是否有Last-Modified策略，有的话向服务器请求，带if-Modified-Since，没有的话直接向web服务器请求。")])])]),t._v(" "),_("p",[t._v("缓存可以从内存读取，也可以从磁盘读取，从哪读取由浏览器决定，资源命中率，算法，决定存在哪里。")]),t._v(" "),_("h3",{attrs:{id:"强制缓存—命中状态码是200"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存—命中状态码是200"}},[t._v("#")]),t._v(" 强制缓存—命中状态码是200")]),t._v(" "),_("p",[t._v("规则是服务器返回的。")]),t._v(" "),_("ul",[_("li",[t._v("Expires：thu，15Apr 2010 20:20:00 GMT，告诉浏览器的到期时间。HTTP1.0的东西，现在作用基本忽略。")]),t._v(" "),_("li",[t._v("Cache-Control：max-age=324234243234，告诉浏览器文件缓存多久")])]),t._v(" "),_("h3",{attrs:{id:"密码学入门"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#密码学入门"}},[t._v("#")]),t._v(" 密码学入门")]),t._v(" "),_("ul",[_("li",[t._v("密码学的处理对象是数字和字符串")]),t._v(" "),_("li",[t._v("散列是一种数据，一旦转换为其他形式将永远无法恢复的加密数据")]),t._v(" "),_("li",[t._v("加密\n"),_("ul",[_("li",[t._v("对称加密（AES、DES、3DES），加密和解密算法一样")]),t._v(" "),_("li",[t._v("非对称加密（RSA），加密和解密算法不一样")])])]),t._v(" "),_("li",[t._v("密钥交换算法")])]),t._v(" "),_("h3",{attrs:{id:"证书签发机构（ca）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#证书签发机构（ca）"}},[t._v("#")]),t._v(" 证书签发机构（CA）")]),t._v(" "),_("p",[t._v("公钥和公钥匙一起生成")]),t._v(" "),_("h3",{attrs:{id:"ssl-tls协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssl-tls协议"}},[t._v("#")]),t._v(" SSL/TLS协议")]),t._v(" "),_("h4",{attrs:{id:"tls握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tls握手"}},[t._v("#")]),t._v(" TLS握手")]),t._v(" "),_("h3",{attrs:{id:"http2协议分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http2协议分析"}},[t._v("#")]),t._v(" HTTP2协议分析")]),t._v(" "),_("ul",[_("li",[t._v("HTTP2没有改动HTTP的应用于一。HTTP方法、状态代码、URI和标头字段等核心概念没变。")]),t._v(" "),_("li",[t._v("HTTP2修改了数据格式化（分帧）以及在客户端与服务器间传输的方式。")]),t._v(" "),_("li",[t._v("由于HTTP2引入了一个新的二进制分帧层，该层无法与之前的HTTP1.x服务器和客户端向后兼容，因此协议的主版本提升到HTTP2")])]),t._v(" "),_("h3",{attrs:{id:"http2的特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http2的特点"}},[t._v("#")]),t._v(" HTTP2的特点")]),t._v(" "),_("ul",[_("li",[t._v("使用二进制格式传输，更高效，更紧凑")]),t._v(" "),_("li",[t._v("对报头压缩，降低开销")]),t._v(" "),_("li",[t._v("多路复用，一个网络连接实现并行请求")]),t._v(" "),_("li",[t._v("服务器主动对推送，减少请求的延迟")]),t._v(" "),_("li",[t._v("默认使用加密")])]),t._v(" "),_("h3",{attrs:{id:"http2-多路复用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http2-多路复用"}},[t._v("#")]),t._v(" HTTP2:多路复用")]),t._v(" "),_("ul",[_("li",[t._v("在HTTP1中，如果客户端想要发起多个并行请求以提升性能，则必须使用多个TCP连接。这种模型也会导致队首阻塞，从而造成底层TCP连接的效率低下。")]),t._v(" "),_("li",[t._v("将HTTP消息分解为独立的帧，交错发送，然后在另一端重新组装时HTTP2最重要的一项增强。这个机制会在整个网络技术栈中引发一系列连锁反应，从而带来巨大的性能提升。\n"),_("ul",[_("li",[t._v("并行交错地发送多个请求，请求之间互不影响")]),t._v(" "),_("li",[t._v("并行交错地发送多个响应，响应之间互不影响")]),t._v(" "),_("li",[t._v("使用一个连接并行发送多个请求和响应")]),t._v(" "),_("li",[t._v("不必再为绕过HTTP1限制而做很多工作")]),t._v(" "),_("li",[t._v("清除不必要的延迟和提高现有网络容量的利用率，从而减少页面加载时间")])])])]),t._v(" "),_("h3",{attrs:{id:"http3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http3"}},[t._v("#")]),t._v(" HTTP3")]),t._v(" "),_("ul",[_("li",[t._v("运行在QUIC之上的HTTP协议被称为HTTP/3")]),t._v(" "),_("li",[t._v("QUIC协议基于UDP，正是看中了UDP的速度与效率，同时也整合了TCP、TLS和HTTP2的优点，并加以优化")]),t._v(" "),_("li",[t._v("特点\n"),_("ul",[_("li",[t._v("减少了握手的延迟")]),t._v(" "),_("li",[t._v("多路复用，并且没有TCP的阻塞问题")]),t._v(" "),_("li",[t._v("连接迁移，（主要是在客户端）当由wifi转移到4g时，连接不会被断开")])])]),t._v(" "),_("li",[t._v("HTTP3与HTTP1和HTTP2没有直接的关系，也不是HTTP2的扩展")]),t._v(" "),_("li",[t._v("HTTP3将会是一个全新的web协议")]),t._v(" "),_("li",[t._v("HTTP3目前处于制定和测试阶段")])]),t._v(" "),_("h3",{attrs:{id:"http与反向代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http与反向代理"}},[t._v("#")]),t._v(" HTTP与反向代理")]),t._v(" "),_("h4",{attrs:{id:"正向代理和反向代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正向代理和反向代理"}},[t._v("#")]),t._v(" 正向代理和反向代理")]),t._v(" "),_("h4",{attrs:{id:"反向代理的用途"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#反向代理的用途"}},[t._v("#")]),t._v(" 反向代理的用途")]),t._v(" "),_("ul",[_("li",[t._v("加密和SSL加速")]),t._v(" "),_("li",[t._v("负载均衡")]),t._v(" "),_("li",[t._v("缓存静态内容")]),t._v(" "),_("li",[t._v("压缩")]),t._v(" "),_("li",[t._v("减速上传")]),t._v(" "),_("li",[t._v("安全")]),t._v(" "),_("li",[t._v("外网发布")])]),t._v(" "),_("h3",{attrs:{id:"nginx"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),_("p",[t._v("Systemctl start | stop | restart | reload")])])}),[],!1,null,null,null);v.default=s.exports}}]);